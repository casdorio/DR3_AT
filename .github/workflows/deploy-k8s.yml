name: Deploy to Kubernetes

on:
  push:
    branches:
      - k8s
  workflow_dispatch:

jobs:
  status-service-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from k8s branch
        uses: actions/checkout@v4
        with:
          ref: k8s

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

  docker:
    runs-on: ubuntu-latest
    needs: status-service-build

    steps:
      - name: Checkout code from k8s branch
        uses: actions/checkout@v4
        with:
          ref: k8s

      - name: Give execution permission to mvnw
        run: chmod +x status-service/mvnw
          
      - name: Build Docker image
        run: docker build -t status-service:latest ./status-service

      - name: Save Docker image as a tar file
        run: docker save status-service:latest -o status-service.tar

      - name: Upload Docker image
        uses: actions/upload-artifact@v3
        with:
          name: status-service-image
          path: status-service.tar

  kind:
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: status-service-image

      - name: Load Docker image into KinD
        run: docker load -i status-service.tar

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/

      - name: Create KinD cluster
        run: kind create cluster

  deploy:
    runs-on: ubuntu-latest
    needs: kind

    steps:
      - name: Deploy to Kubernetes
        run: kubectl apply -f k8s/status.yml

  test:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Run Tests
        run: |
          sleep 10 
          response=$(curl --write-out "%{http_code}" --silent --output /dev/null http://localhost:8081/status)
          if [ "$response" -eq 200 ]; then
            echo "Test passed: Service is active!"
          else
            echo "Test failed: Service returned status code $response"
            exit 1
          fi
