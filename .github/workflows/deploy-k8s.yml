name: Deploy to Kubernetes

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code from k8s branch
        uses: actions/checkout@v4
        with:
          ref: k8s

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Give execution permission to mvnw
        run: chmod +x status-service/mvnw

      - name: Build with Maven
        run: |
          cd status-service # Navigate to the service directory
          ./mvnw clean verify # or 'mvn clean verify' if not using the wrapper

      - name: Build Docker image
        run: |
          docker build -t status-service:latest ./status-service

      - name: Install KinD
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.16.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/

      - name: Create KinD cluster
        run: kind create cluster

      - name: Load Docker image into KinD
        run: |
          kind load docker-image status-service:latest

      - name: Deploy to KinD Kubernetes
        run: |
          kubectl apply -f k8s/status.yml

      - name: Wait for Deployment to be Ready
        run: |
          kubectl wait --for=condition=available --timeout=60s deployment/status-service

      - name: Expose the Service to Host Machine
        run: |
          kubectl expose deployment status-service --type=NodePort --name=status-service

      - name: Get Service URL
        run: |
          kubectl get services

      - name: Run Tests
        run: |
          # Aguarde um pouco para garantir que o serviço esteja ativo
          sleep 20 

          # Obtenha o IP do cluster e a porta do NodePort
          NODE_PORT=$(kubectl get -o jsonpath="{.spec.ports[0].nodePort}" services status-service)
          CLUSTER_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' kind-control-plane)

          # Teste a URL do serviço no Kubernetes
          response=$(curl --write-out "%{http_code}" --silent --output /dev/null http://$CLUSTER_IP:$NODE_PORT/status)

          # Verifique o código de status HTTP
          if [ "$response" -eq 200 ]; then
            echo "Test passed: Service is active!"
          else
            echo "Test failed: Service returned status code $response"
            exit 1
          fi
